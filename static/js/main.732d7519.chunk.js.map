{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","props","react_default","a","createElement","style","margin","src","avatar_url","alt","width","display","marginLeft","fontSize","fontWeight","name","company","CardList","cards","map","card","App_Card","Object","assign","key","id","Form","state","userName","handleSubmit","event","preventDefault","console","log","_this","axios","get","concat","then","resp","onSubmit","data","setState","_this2","this","type","value","onChange","target","placeholder","React","Component","App","addNewCard","cardInfo","_this3","prevState","App_Form","App_CardList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6MCSlCC,EAAO,SAACC,GACV,OACIC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,OAAQ,QAClBJ,EAAAC,EAAAC,cAAA,OAAKG,IAAKN,EAAMO,WAAYC,IAAI,GAAGC,MAAM,OACzCR,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEM,QAAS,eAAgBC,WAAY,KAC/CV,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEQ,SAAU,SAAUC,WAAY,SAAWb,EAAMc,MAC/Db,EAAAC,EAAAC,cAAA,WAAMH,EAAMe,YAOtBC,EAAW,SAAChB,GACd,OACIC,EAAAC,EAAAC,cAAA,WACKH,EAAMiB,MAAMC,IAAI,SAAAC,GAAI,OAAIlB,EAAAC,EAAAC,cAACiB,EAADC,OAAAC,OAAA,CAAMC,IAAKJ,EAAKK,IAAQL,QAMvDM,6MACFC,MAAQ,CAAEC,SAAU,MAEpBC,aAAe,SAACC,GACZA,EAAMC,iBACNC,QAAQC,IAAI,qBAAsBC,EAAKP,MAAMC,UAG7CO,IAAMC,IAAN,gCAAAC,OAA0CH,EAAKP,MAAMC,WAChDU,KAAK,SAAAC,GAEFL,EAAKjC,MAAMuC,SAASD,EAAKE,MACzBP,EAAKQ,SAAS,CAAEd,SAAU,gFAI7B,IAAAe,EAAAC,KACL,OACI1C,EAAAC,EAAAC,cAAA,QAAMoC,SAAUI,KAAKf,cACjB3B,EAAAC,EAAAC,cAAA,SAAOyC,KAAK,OACRC,MAAOF,KAAKjB,MAAMC,SAClBmB,SAAU,SAACjB,GAAD,OAAWa,EAAKD,SAAS,CAAEd,SAAUE,EAAMkB,OAAOF,SAC5DG,YAAY,oBAChB/C,EAAAC,EAAAC,cAAA,UAAQyC,KAAK,UAAb,oBAvBGK,IAAMC,WA6DVC,6MA7BXzB,MAAQ,CACJT,MAAO,CACH,CACIH,KAAM,aACNP,WAAY,mDACZQ,QAAS,gBAKrBqC,WAAa,SAACC,GACVtB,QAAQC,IAAIqB,GACZC,EAAKb,SAAS,SAAAc,GAAS,MAAK,CACxBtC,MAAOsC,EAAUtC,MAAMmB,OAAOiB,+EAKlC,OACIpD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACqD,EAAD,CAAMjB,SAAUI,KAAKS,aACrBnD,EAAAC,EAAAC,cAACsD,EAAD,CAAUxC,MAAO0B,KAAKjB,MAAMT,gBAtB1BiC,aClDEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCLFC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAAQC,SAASC,eAAe,SDoH9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.732d7519.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\n\n\n\n\n// Represent a single card\nconst Card = (props) => {\n    return (\n        <div style={{ margin: '1em' }}>\n            <img src={props.avatar_url} alt=\"\" width=\"75\" />\n            <div style={{ display: 'inline:block', marginLeft: 10 }}>\n                <div style={{ fontSize: '1.25em', fontWeight: 'bold' }}>{props.name}</div>\n                <div>{props.company}</div>\n            </div>\n        </div>\n    );\n};\n\n// Represent a list of cards\nconst CardList = (props) => {\n    return (\n        <div>\n            {props.cards.map(card => <Card key={card.id} {...card} />)}\n        </div>\n    );\n}\n\n// Represents a form on a page\nclass Form extends React.Component {\n    state = { userName: '' };\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        console.log('Event: Form Submit', this.state.userName);\n\n        // ajax... fetch or axios\n        axios.get(`https://api.github.com/users/${this.state.userName}`)\n            .then(resp => {\n                //console.log(resp);        \n                this.props.onSubmit(resp.data);\n                this.setState({ userName: '' });\n            })\n    };\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <input type=\"text\"\n                    value={this.state.userName}\n                    onChange={(event) => this.setState({ userName: event.target.value })}\n                    placeholder=\"Github username\" />\n                <button type=\"submit\">Add card</button>\n            </form>\n        );\n    }\n}\n\n\n//This is the main entry point to the Application\nclass App extends Component {\n    state = {\n        cards: [\n            {\n                name: \"Vicky Chen\",\n                avatar_url: \"https://avatars.githubusercontent.com/u/8443?v=3\",\n                company: \"Manulife\"\n            }\n        ]\n    };\n\n    addNewCard = (cardInfo) => {\n        console.log(cardInfo);\n        this.setState(prevState => ({\n            cards: prevState.cards.concat(cardInfo)\n        }))\n    };\n\n    render() {\n        return (\n            <div>\n                <Form onSubmit={this.addNewCard}></Form>\n                <CardList cards={this.state.cards}></CardList>\n            </div>\n        );\n    }\n}\n\n\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nlet model = { clicks: 0 };\n\nfunction render() {\n    //ReactDOM.render(<App\n    //                    clicks={model.clicks}\n    //                    onClick={() => { model.clicks++; render();}} />, document.getElementById('root'));\n    ReactDOM.render(<App/>, document.getElementById('root'));\n\n}\n\nrender();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}